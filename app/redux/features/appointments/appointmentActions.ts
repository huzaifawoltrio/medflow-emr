import { createAsyncThunk } from "@reduxjs/toolkit";
import api from "../../../lib/axiosConfig";

// Interface for the raw appointment data from the API
export interface Appointment {
  id: number;
  appointment_datetime: string;
  duration: number;
  services: string[];
  status: string;
  patient_id: number;
  doctor_id: number;
  appointment_fee: number;
  billing_type: string;
  location: string;
  repeat: boolean;
}

// Interface for creating a new appointment (omitting fields generated by the backend)
export type NewAppointmentData = Omit<
  Appointment,
  "id" | "doctor_id" | "status"
>;

// Interface for the parameters to fetch appointments (start and end dates)
interface FetchAppointmentsParams {
  startDate: string;
  endDate: string;
}

/**
 * Async thunk for fetching appointments within a date range.
 * It returns an array of appointments on success.
 */
export const fetchAppointments = createAsyncThunk<
  Appointment[],
  FetchAppointmentsParams,
  { rejectValue: string }
>(
  "appointments/fetchAll",
  async ({ startDate, endDate }, { rejectWithValue }) => {
    try {
      const response = await api.get("/appointments", {
        params: { start: startDate, end: endDate },
      });
      return response.data.appointments || [];
    } catch (error: any) {
      if (error.response && error.response.data.message) {
        return rejectWithValue(error.response.data.message);
      } else {
        return rejectWithValue(error.message || "Failed to fetch appointments");
      }
    }
  }
);

/**
 * Async thunk for creating a new appointment.
 * It takes the appointment data and returns the newly created appointment on success.
 */
export const createAppointment = createAsyncThunk<
  Appointment,
  NewAppointmentData,
  { rejectValue: string }
>("appointments/create", async (appointmentData, { rejectWithValue }) => {
  try {
    const response = await api.post("/appointments", appointmentData);
    return response.data.appointment;
  } catch (error: any) {
    if (error.response && error.response.data.message) {
      return rejectWithValue(error.response.data.message);
    } else {
      return rejectWithValue(error.message || "Failed to create appointment");
    }
  }
});
